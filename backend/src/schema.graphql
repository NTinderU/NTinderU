type User {
	id: ID!
	username: String!
	password: String!
	liked: [String!]
	matched: [String!]
}

type Message {
	id: ID!
	from: String!
	to: String!
	body: String!
	timestamp: Date
}

type Chatroom {
	id: ID!
	users: [String!]!
	messages: [Message]!
}

type Query {
	"單個帳號"
	user(username: String!): User
	"所有帳號名稱"
	users: [User!]!
}

type Mutation {
	"新增帳號"
	createUser(data: MutationInput!): User
	"刪除帳號"
	deleteUser(data: MutationInput!): User
}

input MutationInput {
	username: String!
	password: String!
}

input MatchInput {
	username: String!
	max_count: Int
}

input LikedInput {
	username: String!
	target: String!
}

input chatroomMutationInput {
	users: [String!]!
}

input messageMutationInput {
	from: String!
	to: String!
	body: String!
}

type Subscription {
	message(username: String!): MessageSubscriptionPayload!
	like(username: String!): SP
	match(username: String!): SP
}

enum MutationType {
	CREATED
	DELETED
}

type MessageSubscriptionPayload {
	mutation: MutationType!
	data: Message
}

type SP {
	data: String!
}
