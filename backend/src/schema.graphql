scalar Date

type User {
    id: ID!
    username: String!
    password: String!
}

type Message {
    id: ID!
	from: String!
    to: String!
    body: String!
    timestamp: Date
}

type Chatroom {
    id: ID!
    users: [String!]
    messages: [Message]
}

type Query {
    "單個帳號"
    user(username: String!): User
    "所有帳號名稱"
    users: [User!]!
    chatroom(id: ID!): Chatroom
    chatrooms: [Chatroom]
}

type Mutation {
    "新增帳號"
    createUser(data: MutationInput!): User
    "刪除帳號"
    deleteUser(data: MutationInput!): User
    createChatroom(data: chatroomMutationInput!): Chatroom
    createMessage(id: ID!, data: messageMutationInput!): Message
}

input MutationInput {
    username: String!
    password: String!
}

input chatroomMutationInput {
    users: [String!]!
}

input messageMutationInput {
    from: String!
	to: String!
    body: String!
}

type Subscription {
    message(username: String!): MessageSubscriptionPayload!
}

enum MutationType {
    CREATED
    DELETED
}

type MessageSubscriptionPayload {
    mutation: MutationType!
    data: Message
}
