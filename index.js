(()=>{var e={279:e=>{var n={kind:"Document",definitions:[{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"User"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"id"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"username"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"password"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]}]},{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"Query"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",description:{kind:"StringValue",value:"單個帳號",block:!1},name:{kind:"Name",value:"user"},arguments:[{kind:"InputValueDefinition",name:{kind:"Name",value:"username"},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]}],type:{kind:"NamedType",name:{kind:"Name",value:"User"}},directives:[]},{kind:"FieldDefinition",description:{kind:"StringValue",value:"所有帳號名稱",block:!1},name:{kind:"Name",value:"users"},arguments:[],type:{kind:"NonNullType",type:{kind:"ListType",type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"User"}}}}},directives:[]}]},{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"Mutation"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",description:{kind:"StringValue",value:"新增帳號",block:!1},name:{kind:"Name",value:"createUser"},arguments:[{kind:"InputValueDefinition",name:{kind:"Name",value:"data"},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"MutationInput"}}},directives:[]}],type:{kind:"NamedType",name:{kind:"Name",value:"User"}},directives:[]},{kind:"FieldDefinition",description:{kind:"StringValue",value:"刪除帳號",block:!1},name:{kind:"Name",value:"deleteUser"},arguments:[{kind:"InputValueDefinition",name:{kind:"Name",value:"data"},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"MutationInput"}}},directives:[]}],type:{kind:"NamedType",name:{kind:"Name",value:"User"}},directives:[]}]},{kind:"InputObjectTypeDefinition",name:{kind:"Name",value:"MutationInput"},directives:[],fields:[{kind:"InputValueDefinition",name:{kind:"Name",value:"username"},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"InputValueDefinition",name:{kind:"Name",value:"password"},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]}]}],loc:{start:0,end:345}};n.loc.source={body:'type User {\r\n\tid: ID!\r\n\tusername: String!\r\n\tpassword: String!\r\n}\r\n\r\ntype Query {\r\n\t"單個帳號"\r\n\tuser(username: String!): User\r\n\t"所有帳號名稱"\r\n\tusers: [User!]!\r\n}\r\n\r\ntype Mutation {\r\n\t"新增帳號"\r\n\tcreateUser(data: MutationInput!): User\r\n\t"刪除帳號"\r\n\tdeleteUser(data: MutationInput!): User\r\n}\r\n\r\ninput MutationInput {\r\n\tusername: String!\r\n\tpassword: String!\r\n}\r\n',name:"GraphQL request",locationOffset:{line:1,column:1}},e.exports=n}},n={};function i(t){if(n[t])return n[t].exports;var a=n[t]={exports:{}};return e[t](a,a.exports,i),a.exports}i.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return i.d(n,{a:n}),n},i.d=(e,n)=>{for(var t in n)i.o(n,t)&&!i.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},i.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{"use strict";const e=require("dotenv-defaults");var n=i.n(e);const t=require("apollo-server-express"),a=require("mongoose");var r=i.n(a);const d=new a.Schema({username:{type:String,required:[!0,"Username field is required."]},password:{type:String,required:[!0,"Password field is required."]}}),s=(0,a.model)("Users",d),u=require("express");var o=i.n(u);const l={Query:{user:async(e,{username:n},{User:i})=>await i.findOne({username:n}),users:async(e,{},{User:n})=>await n.find().sort({username:1})},Mutation:{createUser:async(e,{data:n},{User:i})=>{let t=await i.findOne(n);return t?null:(t=new i(n),await t.save(),t)},deleteUser:async(e,{data:n},{User:i})=>{const t=await i.findOne(n);return t&&await i.deleteOne(n),t}}};var p=i(279),m=i.n(p);n().config(),process.env.MONGO_URL||(console.error("Missing MONGO_URL."),process.exit(1));const c=new t.PubSub;r().connect(process.env.MONGO_URL,{useNewUrlParser:!0,useUnifiedTopology:!0});const k=r().connection;k.on("error",(e=>console.error(e))),k.once("open",(()=>{console.log("MongoDB connected.");const e=new t.ApolloServer({typeDefs:m(),resolvers:l,context:{User:s,pubsub:c},playground:!0});let n=o()();e.applyMiddleware({app:n,path:"/"});const i=process.env.PORT||4e3;n.listen(i,(()=>console.log(`server running at port ${i}.`)))}))})()})();