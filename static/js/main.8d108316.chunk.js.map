{"version":3,"sources":["IndexPage/NTU.png","IndexPage/graphql/CreateUser.js","ContextStore.js","IndexPage/graphql/QueryUser.js","IndexPage/LoginPopup/LoginPopup.js","IndexPage/IndexPage.js","MainPage/RoomList/ChatroomButton/ChatroomButton.js","MainPage/RoomList/RoomList.js","svg/Heart.js","svg/X.js","MainPage/MatchPanel/MoodButton/MoodButton.js","MainPage/MatchPanel/graphql/QueryMatch.js","MainPage/MatchPanel/graphql/AddLikedTarget.js","MainPage/MatchPanel/graphql/AddMatchedTarget.js","MainPage/MatchPanel/MatchPanel.js","MainPage/graphql/CreateMessage.js","MainPage/graphql/QueryChatroom.js","MainPage/graphql/SubscribeMessage.js","svg/Submit.js","MainPage/ChatPanel/ChatPanel.js","MainPage/graphql/QueryPhoto.js","MainPage/graphql/SubscribeMatch.js","MainPage/MainPage.js","App.js","index.js"],"names":["gql","createContext","loggedIn","setLoggedIn","loggedInUser","setLoggedInUser","usernameErrors","passwordErrors","confirmErrors","Popup","props","useContext","ContextStore","useState","usernameInput","setUsernameInput","passwordInput","setPasswordInput","confirmInput","setConfirmInput","username","setUsername","password","setPassword","useLazyQuery","QueryUser","variables","loadUser","loading","data","useMutation","CreateUser","createUser","resetError","setUsernameError","setPasswordError","setConfirmError","clearPasswordInput","clearUserInfo","queryResult","useRef","enterEvent","fail","signin","checkFormat","current","useEffect","user","compareSync","hashPassword","hashSync","setTimeout","inputEnter","e","key","undefined","Modal","show","onHide","className","centered","Header","Title","Body","Form","Group","controlId","Label","Control","disabled","type","placeholder","onKeyUp","onChange","target","value","Text","usernameError","passwordError","onClick","setsignin","confirmError","Footer","Button","variant","IndexPage","popUpShow","setPopUpShow","setSignin","alt","src","logo","size","id","ChatroomButton","choosing","sRID","roomID","sTN","sC","idx","lastMessage","RoomList","rooms","setRoomID","setTargetName","chosen","setChosen","map","room","i","Heart","xmlns","fill","viewBox","x1","y1","x2","y2","spreadMethod","offset","stopColor","fillRule","d","X","MoodButton","MatchPanel","matchCount","matchIndex","setMatchIndex","isEnd","setIsEnd","useQuery","QueryMatch","max_count","error","refetch","AddLikedTarget","addLikedTarget","AddMatchedTarget","addMatchedTarget","nextPeople","a","match","length","getMatchObject","liked","photo","likeSomeone","obj","includes","Submit","stroke","ChatPanel","target_username","current_roomid","queryChatroom","subscribeToMore","body","setBody","messagesRef","createMessage","addMessage","scrollTop","scrollHeight","handleMessage","trim","from","to","document","SubscribeMessage","updateQuery","prev","subscriptionData","prevMsg","chatroom","messages","newMsg","message","users","ref","MainPage","mode","setMode","roomid","target_name","QueryPhoto","SubscribeMatch","getrooms","current_username","App","Provider","L","httpLink","HttpLink","uri","wsLink","WebSocketLink","options","reconnect","link","split","query","definition","getMainDefinition","kind","operation","client","ApolloClient","cache","InMemoryCache","restore","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.8d108316.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/NTU.30d99a60.png\";","import { gql } from \"@apollo/client\";\r\n\r\nexport default gql`\r\n\tmutation($username: String!, $password: String!) {\r\n\t\tcreateUser(data: { username: $username, password: $password }) {\r\n\t\t\tusername\r\n\t\t\tpassword\r\n\t\t}\r\n\t}\r\n`;\r\n","import { createContext } from \"react\";\r\n\r\nexport default createContext({\r\n\tloggedIn: false,\r\n\tsetLoggedIn: () => {},\r\n\tloggedInUser: false,\r\n\tsetLoggedInUser: () => {},\r\n});\r\n","import { gql } from \"@apollo/client\";\r\n\r\nexport default gql`\r\n\tquery($username: String!) {\r\n\t\tuser(username: $username) {\r\n\t\t\tusername\r\n\t\t\tpassword\r\n\t\t}\r\n\t}\r\n`;\r\n","import React, { useState, useEffect, useRef, useContext } from \"react\";\r\nimport { useLazyQuery, useMutation } from \"@apollo/client\";\r\nimport { Modal, Form, Button } from \"react-bootstrap\";\r\nimport { hashSync, compareSync } from \"bcryptjs\";\r\nimport CreateUser from \"../graphql/CreateUser\";\r\nimport ContextStore from \"../../ContextStore\";\r\nimport QueryUser from \"../graphql/QueryUser\";\r\nimport \"./LoginPopup.scss\";\r\n\r\nconst usernameErrors = [null, \"Cannot be blank.\", \"User not found.\", \"Username has been used.\"];\r\nconst passwordErrors = [null, \"Cannot be blank.\", \"Incorrect password.\"];\r\nconst confirmErrors = [null, \"Cannot be blank.\", \"Inconsistant with password.\"];\r\n\r\nconst Popup = (props) => {\r\n\tconst { setLoggedIn, setLoggedInUser } = useContext(ContextStore);\r\n\r\n\tconst [usernameInput, setUsernameInput] = useState(\"\");\r\n\tconst [passwordInput, setPasswordInput] = useState(\"\");\r\n\tconst [confirmInput, setConfirmInput] = useState(\"\");\r\n\r\n\tconst [username, setUsername] = useState(\"\");\r\n\tconst [password, setPassword] = useState(\"\");\r\n\r\n\tconst [loadUser, { loading, data }] = useLazyQuery(QueryUser, {\r\n\t\tvariables: { username },\r\n\t});\r\n\r\n\tconst [createUser] = useMutation(CreateUser);\r\n\r\n\tconst handleUsernameInput = (e) => setUsernameInput(e.target.value);\r\n\tconst handlePasswordInput = (e) => setPasswordInput(e.target.value);\r\n\tconst handleConfirmInput = (e) => setConfirmInput(e.target.value);\r\n\r\n\tconst resetError = () => {\r\n\t\tprops.setUsernameError(0);\r\n\t\tprops.setPasswordError(0);\r\n\t\tprops.setConfirmError(0);\r\n\t};\r\n\r\n\tconst clearPasswordInput = () => {\r\n\t\tsetPasswordInput(\"\");\r\n\t\tsetConfirmInput(\"\");\r\n\t};\r\n\r\n\tconst clearUserInfo = () => {\r\n\t\tsetUsername(\"\");\r\n\t\tsetPassword(\"\");\r\n\t};\r\n\r\n\tconst checkFormat = () => {\r\n\t\tresetError();\r\n\t\tlet fail = false;\r\n\r\n\t\tif (usernameInput === \"\") {\r\n\t\t\tprops.setUsernameError(1);\r\n\t\t\tfail = true;\r\n\t\t} else props.setUsernameError(0);\r\n\r\n\t\tif (passwordInput === \"\") {\r\n\t\t\tprops.setPasswordError(1);\r\n\t\t\tclearPasswordInput();\r\n\t\t\tfail = true;\r\n\t\t} else props.setPasswordError(0);\r\n\r\n\t\tif (!props.signin && (confirmInput === \"\" || passwordInput !== confirmInput)) {\r\n\t\t\tif (confirmInput === \"\") props.setConfirmError(1);\r\n\t\t\telse props.setConfirmError(2);\r\n\t\t\tclearPasswordInput();\r\n\t\t\tfail = true;\r\n\t\t} else props.setConfirmError(0);\r\n\r\n\t\treturn !fail;\r\n\t};\r\n\r\n\tconst queryResult = useRef(false);\r\n\r\n\tconst enterEvent = () => {\r\n\t\tif (!checkFormat()) return;\r\n\t\tclearUserInfo();\r\n\t\tsetUsername(usernameInput);\r\n\t\tsetPassword(passwordInput);\r\n\t\tqueryResult.current = true;\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tif (username) loadUser();\r\n\t}, [username, loadUser]);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (username && password && data) {\r\n\t\t\tif (!props.signin) {\r\n\t\t\t\tif (data.user !== null) {\r\n\t\t\t\t\t// username is used\r\n\t\t\t\t\tprops.setUsernameError(3);\r\n\t\t\t\t\tclearPasswordInput();\r\n\t\t\t\t\tclearUserInfo();\r\n\t\t\t\t} else if (queryResult.current) {\r\n\t\t\t\t\t// new user\r\n\t\t\t\t\tconst hashPassword = hashSync(password, 10);\r\n\r\n\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\tsetLoggedIn(true);\r\n\t\t\t\t\t\tsetLoggedInUser(username);\r\n\t\t\t\t\t}, 2500);\r\n\r\n\t\t\t\t\tcreateUser({\r\n\t\t\t\t\t\tvariables: { username, password: hashPassword },\r\n\t\t\t\t\t});\r\n\t\t\t\t\t// set login success\r\n\t\t\t\t}\r\n\t\t\t\tqueryResult.current = false;\r\n\t\t\t} else {\r\n\t\t\t\tif (data.user === null) {\r\n\t\t\t\t\t// account not found\r\n\t\t\t\t\tprops.setUsernameError(2);\r\n\t\t\t\t\tclearPasswordInput();\r\n\t\t\t\t\tclearUserInfo();\r\n\t\t\t\t} else if (queryResult.current) {\r\n\t\t\t\t\tif (!compareSync(password, data.user.password)) {\r\n\t\t\t\t\t\t// incorrect password\r\n\t\t\t\t\t\tprops.setPasswordError(2);\r\n\t\t\t\t\t\tclearPasswordInput();\r\n\t\t\t\t\t\tclearUserInfo();\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// login success\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tsetLoggedIn(true);\r\n\t\t\t\t\t\tsetLoggedInUser(username);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tqueryResult.current = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}, [\r\n\t\tloading,\r\n\t\tdata,\r\n\t\tusername,\r\n\t\tpassword,\r\n\t\tpasswordInput,\r\n\t\tprops,\r\n\t\tcreateUser,\r\n\t\tsetLoggedIn,\r\n\t\tsetLoggedInUser,\r\n\t]);\r\n\r\n\tconst inputEnter = (e) => (e.key === \"Enter\" ? enterEvent() : undefined);\r\n\r\n\treturn (\r\n\t\t<Modal show={props.show} onHide={props.onHide} className=\"popup-modal\" centered>\r\n\t\t\t<Modal.Header>\r\n\t\t\t\t<Modal.Title>{props.signin ? \"Sign In\" : \"Sign Up\"}</Modal.Title>\r\n\t\t\t</Modal.Header>\r\n\t\t\t<Modal.Body>\r\n\t\t\t\t<Form className=\"popup\">\r\n\t\t\t\t\t<Form.Group controlId=\"username\">\r\n\t\t\t\t\t\t<Form.Label>Username</Form.Label>\r\n\t\t\t\t\t\t<Form.Control\r\n\t\t\t\t\t\t\tdisabled={loading}\r\n\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\tplaceholder=\"Username\"\r\n\t\t\t\t\t\t\tonKeyUp={inputEnter}\r\n\t\t\t\t\t\t\tonChange={handleUsernameInput}\r\n\t\t\t\t\t\t\tvalue={usernameInput}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<Form.Text className=\"error\">\r\n\t\t\t\t\t\t\t{usernameErrors[props.usernameError]}\r\n\t\t\t\t\t\t</Form.Text>\r\n\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t<Form.Group controlId=\"password\">\r\n\t\t\t\t\t\t<Form.Label>Password</Form.Label>\r\n\t\t\t\t\t\t<Form.Control\r\n\t\t\t\t\t\t\tdisabled={loading}\r\n\t\t\t\t\t\t\ttype=\"password\"\r\n\t\t\t\t\t\t\tplaceholder=\"Password\"\r\n\t\t\t\t\t\t\tonKeyUp={inputEnter}\r\n\t\t\t\t\t\t\tonChange={handlePasswordInput}\r\n\t\t\t\t\t\t\tvalue={passwordInput}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<Form.Text className=\"error\">\r\n\t\t\t\t\t\t\t{passwordErrors[props.passwordError]}\r\n\t\t\t\t\t\t</Form.Text>\r\n\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t{props.signin ? (\r\n\t\t\t\t\t\t<Form.Text>\r\n\t\t\t\t\t\t\tDon't have an account?{\" \"}\r\n\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\t\tresetError();\r\n\t\t\t\t\t\t\t\t\tclearUserInfo();\r\n\t\t\t\t\t\t\t\t\tsetConfirmInput(\"\");\r\n\t\t\t\t\t\t\t\t\tprops.setsignin(0);\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tSign Up\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t</Form.Text>\r\n\t\t\t\t\t) : null}\r\n\t\t\t\t\t{props.signin ? null : (\r\n\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t<Form.Group controlId=\"password-again\">\r\n\t\t\t\t\t\t\t\t<Form.Label>Confirm Password</Form.Label>\r\n\t\t\t\t\t\t\t\t<Form.Control\r\n\t\t\t\t\t\t\t\t\tdisabled={loading}\r\n\t\t\t\t\t\t\t\t\ttype=\"password\"\r\n\t\t\t\t\t\t\t\t\tplaceholder=\"Confirm Password\"\r\n\t\t\t\t\t\t\t\t\tonKeyUp={inputEnter}\r\n\t\t\t\t\t\t\t\t\tonChange={handleConfirmInput}\r\n\t\t\t\t\t\t\t\t\tvalue={confirmInput}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t<Form.Text className=\"error\">\r\n\t\t\t\t\t\t\t\t\t{confirmErrors[props.confirmError]}\r\n\t\t\t\t\t\t\t\t</Form.Text>\r\n\t\t\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t\t\t<Form.Text>\r\n\t\t\t\t\t\t\t\tHave an account?{\" \"}\r\n\t\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\t\t\tresetError();\r\n\t\t\t\t\t\t\t\t\t\tclearUserInfo();\r\n\t\t\t\t\t\t\t\t\t\tprops.setsignin(1);\r\n\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\tLog in now\r\n\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t</Form.Text>\r\n\t\t\t\t\t\t</>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</Form>\r\n\t\t\t</Modal.Body>\r\n\t\t\t<Modal.Footer>\r\n\t\t\t\t<Button variant=\"secondary\" onClick={props.onHide}>\r\n\t\t\t\t\tCancel\r\n\t\t\t\t</Button>\r\n\t\t\t\t<Button onClick={enterEvent}>{props.signin ? \"Sign In\" : \"Sign Up\"}</Button>\r\n\t\t\t</Modal.Footer>\r\n\t\t</Modal>\r\n\t);\r\n};\r\n\r\nexport default Popup;\r\n","import { useState } from \"react\";\r\nimport \"./IndexPage.scss\";\r\nimport logo from \"./NTU.png\";\r\nimport LoginPopup from \"./LoginPopup/LoginPopup\";\r\n\r\nconst IndexPage = () => {\r\n\tconst [popUpShow, setPopUpShow] = useState(false);\r\n\tconst [usernameError, setUsernameError] = useState(0);\r\n\tconst [passwordError, setPasswordError] = useState(0);\r\n\tconst [confirmError, setConfirmError] = useState(0);\r\n\tconst [signin, setSignin] = useState(0);\r\n\r\n\treturn (\r\n\t\t<div className=\"index\">\r\n\t\t\t<div className=\"index-header\">\r\n\t\t\t\t<img className=\"logo\" alt=\"NTU-logo\" src={logo} />\r\n\t\t\t\t<button\r\n\t\t\t\t\tsize=\"lg\"\r\n\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\tsetUsernameError(0);\r\n\t\t\t\t\t\tsetPasswordError(0);\r\n\t\t\t\t\t\tsetPopUpShow(true);\r\n\t\t\t\t\t\tsetSignin(1);\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\tSign In\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"index-wrapper\">\r\n\t\t\t\t<div id=\"app-title\">NTinderU</div>\r\n\t\t\t\t<button\r\n\t\t\t\t\tsize=\"lg\"\r\n\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\tsetUsernameError(0);\r\n\t\t\t\t\t\tsetPasswordError(0);\r\n\t\t\t\t\t\tsetConfirmError(0);\r\n\t\t\t\t\t\tsetPopUpShow(true);\r\n\t\t\t\t\t\tsetSignin(0);\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\tSign Up\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t\t<LoginPopup\r\n\t\t\t\tsignin={signin}\r\n\t\t\t\tsetsignin={setSignin}\r\n\t\t\t\tshow={popUpShow}\r\n\t\t\t\tonHide={() => setPopUpShow(false)}\r\n\t\t\t\tusernameError={usernameError}\r\n\t\t\t\tpasswordError={passwordError}\r\n\t\t\t\tconfirmError={confirmError}\r\n\t\t\t\tsetUsernameError={setUsernameError}\r\n\t\t\t\tsetPasswordError={setPasswordError}\r\n\t\t\t\tsetConfirmError={setConfirmError}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default IndexPage;\r\n","import React from \"react\";\r\nimport \"./ChatroomButton.scss\";\r\n\r\nconst ChatroomButton = (props) => {\r\n\tconst click = () => {\r\n\t\tprops.sRID(props.roomID);\r\n\t\tprops.sTN(props.username);\r\n\t\tprops.sC(props.idx);\r\n\t};\r\n\treturn (\r\n\t\t<button className={`chatroom-button${props.choosing ? \" choosing\" : \"\"}`} onClick={click}>\r\n\t\t\t<img\r\n\t\t\t\tclassName=\"chatroom-button-picture\"\r\n\t\t\t\tsrc=\"https://icon-library.com/images/default-user-icon/default-user-icon-13.jpg\"\r\n\t\t\t\talt=\"user big\"\r\n\t\t\t/>\r\n\t\t\t<div className=\"chatroom-information\">\r\n\t\t\t\t<div className=\"chatroom-button-username\">{props.username}</div>\r\n\t\t\t\t<div className=\"chatroom-button-lastmessage\">{props.lastMessage}</div>\r\n\t\t\t</div>\r\n\t\t</button>\r\n\t);\r\n};\r\n\r\nexport default ChatroomButton;\r\n","import { useState } from \"react\";\r\nimport ChatroomButton from \"./ChatroomButton/ChatroomButton\";\r\n\r\nconst RoomList = ({ rooms, setRoomID, setTargetName }) => {\r\n\tconst [chosen, setChosen] = useState(0);\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{rooms.map((room, i) => (\r\n\t\t\t\t<ChatroomButton\r\n\t\t\t\t\tchoosing={i === chosen}\r\n\t\t\t\t\tkey={i}\r\n\t\t\t\t\tidx={i}\r\n\t\t\t\t\tusername={room.target}\r\n\t\t\t\t\troomID={room.roomID}\r\n\t\t\t\t\tsRID={setRoomID}\r\n\t\t\t\t\tsTN={setTargetName}\r\n\t\t\t\t\tsC={setChosen}\r\n\t\t\t\t/>\r\n\t\t\t))}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default RoomList;\r\n","import React from \"react\";\r\n\r\nconst Heart = () => (\r\n\t<svg\r\n\t\txmlns=\"http://www.w3.org/2000/svg\"\r\n\t\tfill=\"currentColor\"\r\n\t\tclassName=\"bi bi-heart-fill\"\r\n\t\tviewBox=\"0 0 16 16\"\r\n\t>\r\n\t\t<defs>\r\n\t\t\t<linearGradient\r\n\t\t\t\tid=\"heartGradient\"\r\n\t\t\t\tx1=\"100%\"\r\n\t\t\t\ty1=\"0%\"\r\n\t\t\t\tx2=\"0%\"\r\n\t\t\t\ty2=\"100%\"\r\n\t\t\t\tspreadMethod=\"pad\"\r\n\t\t\t>\r\n\t\t\t\t<stop offset=\"0%\" stopColor=\"#02df8a\" />\r\n\t\t\t\t<stop offset=\"100%\" stopColor=\"#66f0e1\" />\r\n\t\t\t</linearGradient>\r\n\t\t</defs>\r\n\t\t<path\r\n\t\t\tfill=\"url(#heartGradient)\"\r\n\t\t\tfillRule=\"evenodd\"\r\n\t\t\td=\"M8 1.314C12.438-3.248 23.534 4.735 8 15-7.534 4.736 3.562-3.248 8 1.314z\"\r\n\t\t/>\r\n\t</svg>\r\n);\r\n\r\nexport default Heart;\r\n","import React from \"react\";\r\n\r\nconst X = () => (\r\n\t<svg\r\n\t\txmlns=\"http://www.w3.org/2000/svg\"\r\n\t\tfill=\"currentColor\"\r\n\t\tclassName=\"bi bi-x\"\r\n\t\tviewBox=\"0 0 16 16\"\r\n\t>\r\n\t\t<defs>\r\n\t\t\t<linearGradient id=\"xGradient\" x1=\"100%\" y1=\"0%\" x2=\"0%\" y2=\"100%\" spreadMethod=\"pad\">\r\n\t\t\t\t<stop offset=\"0%\" stopColor=\"#fd267d\" />\r\n\t\t\t\t<stop offset=\"100%\" stopColor=\"#ff7955\" />\r\n\t\t\t</linearGradient>\r\n\t\t</defs>\r\n\t\t<path\r\n\t\t\tfill=\"url(#xGradient)\"\r\n\t\t\td=\"M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z\"\r\n\t\t/>\r\n\t</svg>\r\n);\r\n\r\nexport default X;\r\n","import React from \"react\";\r\nimport \"./MoodButton.scss\";\r\nimport Heart from \"../../../svg/Heart\";\r\nimport X from \"../../../svg/X\";\r\n\r\nconst MoodButton = ({ type, onClick }) => (\r\n\t<button className={`mood-button${type ? ` mood-${type}` : \"\"}`} onClick={onClick}>\r\n\t\t{type === \"heart\" ? <Heart /> : type === \"x\" ? <X /> : null}\r\n\t</button>\r\n);\r\n\r\nexport default MoodButton;\r\n","import { gql } from \"@apollo/client\";\r\n\r\nexport default gql`\r\n\tquery($username: String!, $max_count: Int!) {\r\n\t\tmatch(data: { username: $username, max_count: $max_count }) {\r\n\t\t\tusername\r\n\t\t\tliked\r\n\t\t\tphoto\r\n\t\t}\r\n\t}\r\n`;\r\n","import { gql } from \"@apollo/client\";\r\n\r\nexport default gql`\r\n\tmutation($username: String!, $target: String!) {\r\n\t\taddLikedUser(data: { username: $username, target: $target }) {\r\n\t\t\tusername\r\n\t\t\tliked\r\n\t\t}\r\n\t}\r\n`;\r\n","import { gql } from \"@apollo/client\";\r\n\r\nexport default gql`\r\n\tmutation($username: String!, $target: String!) {\r\n\t\taddMatchedUser(data: { username: $username, target: $target }) {\r\n\t\t\tusername\r\n\t\t\tliked\r\n\t\t}\r\n\t\tcreateChatroom(data: { users: [$username, $target] }) {\r\n\t\t\tid\r\n\t\t}\r\n\t}\r\n`;\r\n","import React, { useState, useContext } from \"react\";\r\nimport { useMutation, useQuery } from \"@apollo/client\";\r\nimport MoodButton from \"./MoodButton/MoodButton\";\r\nimport ContextStore from \"../../ContextStore\";\r\nimport QueryMatch from \"./graphql/QueryMatch\";\r\nimport AddLikedTarget from \"./graphql/AddLikedTarget\";\r\nimport AddMatchedTarget from \"./graphql/AddMatchedTarget\";\r\nimport \"./MatchPanel.scss\";\r\n\r\nconst MatchPanel = ({ matchCount }) => {\r\n\tconst { loggedInUser } = useContext(ContextStore);\r\n\tconst [matchIndex, setMatchIndex] = useState(0);\r\n\tconst [isEnd, setIsEnd] = useState(false);\r\n\tconst { loading, error, data, refetch } = useQuery(QueryMatch, {\r\n\t\tvariables: { username: loggedInUser, max_count: matchCount },\r\n\t});\r\n\tconst [addLikedTarget] = useMutation(AddLikedTarget);\r\n\tconst [addMatchedTarget] = useMutation(AddMatchedTarget);\r\n\r\n\tconst nextPeople = async () => {\r\n\t\tif (matchIndex === data.match.length - 1) {\r\n\t\t\tsetIsEnd(true);\r\n\t\t\tawait refetch();\r\n\t\t\tsetMatchIndex(0);\r\n\t\t\tsetIsEnd(false);\r\n\t\t} else setMatchIndex(matchIndex + 1);\r\n\t};\r\n\tconst getMatchObject = () => {\r\n\t\tif (data === null) {\r\n\t\t\treturn {\r\n\t\t\t\tusername: \"No People. Press Any Button to refetch\",\r\n\t\t\t\tliked: [],\r\n\t\t\t\tphoto: \"https://via.placeholder.com/320x500.png\",\r\n\t\t\t};\r\n\t\t}\r\n\t\tif (data.match.length === 0 || isEnd) {\r\n\t\t\treturn {\r\n\t\t\t\tusername: \"No People. Press Any Button to refetch\",\r\n\t\t\t\tliked: [],\r\n\t\t\t\tphoto: \"https://via.placeholder.com/320x500.png\",\r\n\t\t\t};\r\n\t\t} else {\r\n\t\t\treturn {\r\n\t\t\t\tusername: data.match[matchIndex].username,\r\n\t\t\t\tliked: data.match[matchIndex].liked,\r\n\t\t\t\tphoto: data.match[matchIndex].photo,\r\n\t\t\t};\r\n\t\t}\r\n\t};\r\n\r\n\tconst likeSomeone = () => {\r\n\t\tlet obj = getMatchObject();\r\n\t\tlet target = obj.username;\r\n\t\tif (target !== \"No People. Press Any Button to refetch\") {\r\n\t\t\taddLikedTarget({\r\n\t\t\t\tvariables: {\r\n\t\t\t\t\tusername: loggedInUser,\r\n\t\t\t\t\ttarget: target,\r\n\t\t\t\t},\r\n\t\t\t});\r\n\t\t\tif (obj.liked.includes(loggedInUser)) {\r\n\t\t\t\taddMatchedTarget({\r\n\t\t\t\t\tvariables: {\r\n\t\t\t\t\t\tusername: loggedInUser,\r\n\t\t\t\t\t\ttarget: target,\r\n\t\t\t\t\t},\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tif (loading) return <span>Loading...</span>;\r\n\r\n\tif (error) return <></>;\r\n\r\n\treturn (\r\n\t\t<div className=\"match-panel\">\r\n\t\t\t<span>{getMatchObject().username}</span>\r\n\t\t\t<img className=\"user-picture-big\" src={getMatchObject().photo} alt=\"帥哥 || 美女\" />\r\n\t\t\t<div className=\"mood-buttons\">\r\n\t\t\t\t<MoodButton type=\"x\" onClick={nextPeople} />\r\n\t\t\t\t<MoodButton\r\n\t\t\t\t\ttype=\"heart\"\r\n\t\t\t\t\tonClick={async () => {\r\n\t\t\t\t\t\tawait likeSomeone();\r\n\t\t\t\t\t\tnextPeople();\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default MatchPanel;\r\n","import { gql } from \"@apollo/client\";\r\n\r\nexport default gql`\r\n\tmutation($id: ID!, $from: String!, $to: String!, $body: String!) {\r\n\t\tcreateMessage(id: $id, data: { from: $from, to: $to, body: $body }) {\r\n\t\t\tfrom\r\n\t\t\tbody\r\n\t\t\ttimestamp\r\n\t\t}\r\n\t}\r\n`;\r\n","import { gql } from \"@apollo/client\";\r\n\r\nexport default gql`\r\n\tquery($id: ID!, $target: String!) {\r\n\t\tchatroom(id: $id) {\r\n\t\t\tid\r\n\t\t\tusers\r\n\t\t\tmessages {\r\n\t\t\t\tfrom\r\n\t\t\t\tbody\r\n\t\t\t\ttimestamp\r\n\t\t\t}\r\n\t\t}\r\n\t\tuser(username: $target) {\r\n\t\t\tphoto\r\n\t\t}\r\n\t}\r\n`;\r\n","import { gql } from \"@apollo/client\";\r\n\r\nexport default gql`\r\n\tsubscription($username: String!) {\r\n\t\tmessage(username: $username) {\r\n\t\t\tdata {\r\n\t\t\t\tfrom\r\n\t\t\t\tto\r\n\t\t\t\tbody\r\n\t\t\t\ttimestamp\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n","import React from \"react\";\r\n\r\nconst Submit = () => (\r\n\t<svg viewBox=\"0 0 24 24\">\r\n\t\t<path\r\n\t\t\td=\"M16.6915026,12.4744748 L3.50612381,13.2599618 C3.19218622,13.2599618 3.03521743,13.4170592 3.03521743,13.5741566 L1.15159189,20.0151496 C0.8376543,20.8006365 0.99,21.89 1.77946707,22.52 C2.41,22.99 3.50612381,23.1 4.13399899,22.8429026 L21.714504,14.0454487 C22.6563168,13.5741566 23.1272231,12.6315722 22.9702544,11.6889879 C22.8132856,11.0605983 22.3423792,10.4322088 21.714504,10.118014 L4.13399899,1.16346272 C3.34915502,0.9 2.40734225,1.00636533 1.77946707,1.4776575 C0.994623095,2.10604706 0.8376543,3.0486314 1.15159189,3.99121575 L3.03521743,10.4322088 C3.03521743,10.5893061 3.34915502,10.7464035 3.50612381,10.7464035 L16.6915026,11.5318905 C16.6915026,11.5318905 17.1624089,11.5318905 17.1624089,12.0031827 C17.1624089,12.4744748 16.6915026,12.4744748 16.6915026,12.4744748 Z\"\r\n\t\t\tfillRule=\"evenodd\"\r\n\t\t\tfill=\"#0099ff\"\r\n\t\t\tstroke=\"none\"\r\n\t\t/>\r\n\t</svg>\r\n);\r\n\r\nexport default Submit;\r\n","import React, { useState, useEffect, useRef, useContext } from \"react\";\r\nimport { useQuery, useMutation } from \"@apollo/client\";\r\nimport ContextStore from \"../../ContextStore\";\r\nimport createMessage from \"../graphql/CreateMessage\";\r\nimport queryChatroom from \"../graphql/QueryChatroom\";\r\nimport SubscribeMessage from \"../graphql/SubscribeMessage\";\r\nimport Submit from \"../../svg/Submit\";\r\nimport \"./ChatPanel.scss\";\r\n\r\nconst ChatPanel = ({ target_username, current_roomid }) => {\r\n\tconst { loggedInUser } = useContext(ContextStore);\r\n\r\n\tconst { loading, error, data, subscribeToMore, refetch } = useQuery(queryChatroom, {\r\n\t\tvariables: {\r\n\t\t\tid: current_roomid,\r\n\t\t\ttarget: target_username,\r\n\t\t},\r\n\t});\r\n\r\n\tconst [body, setBody] = useState(\"\");\r\n\tconst messagesRef = useRef(null);\r\n\tconst [addMessage] = useMutation(createMessage);\r\n\r\n\tuseEffect(\r\n\t\t() =>\r\n\t\t\tmessagesRef.current\r\n\t\t\t\t? (messagesRef.current.scrollTop = messagesRef.current.scrollHeight)\r\n\t\t\t\t: undefined,\r\n\t\t[data, messagesRef]\r\n\t);\r\n\r\n\tuseEffect(() => {\r\n\t\trefetch({\r\n\t\t\tvariables: {\r\n\t\t\t\tid: current_roomid,\r\n\t\t\t\ttarget: target_username,\r\n\t\t\t},\r\n\t\t});\r\n\t}, [current_roomid, refetch, target_username]);\r\n\r\n\tconst handleMessage = () => {\r\n\t\tif (!body.trim().length) return;\r\n\t\taddMessage({\r\n\t\t\tvariables: {\r\n\t\t\t\tid: current_roomid,\r\n\t\t\t\tfrom: loggedInUser,\r\n\t\t\t\tto: target_username,\r\n\t\t\t\tbody: body.trim(),\r\n\t\t\t},\r\n\t\t});\r\n\t\tsetBody(\"\");\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tsubscribeToMore({\r\n\t\t\tdocument: SubscribeMessage,\r\n\t\t\tvariables: { username: loggedInUser },\r\n\t\t\tupdateQuery: (prev, { subscriptionData }) => {\r\n\t\t\t\tconst prevMsg = prev.chatroom.messages;\r\n\t\t\t\tif (!subscriptionData.data) return prev;\r\n\t\t\t\tconst newMsg = subscriptionData.data.message.data;\r\n\t\t\t\tif (newMsg.from !== target_username && newMsg.from !== loggedInUser) return prev;\r\n\r\n\t\t\t\treturn {\r\n\t\t\t\t\tprev,\r\n\t\t\t\t\tchatroom: {\r\n\t\t\t\t\t\tid: current_roomid,\r\n\t\t\t\t\t\tusers: [loggedInUser, target_username],\r\n\t\t\t\t\t\tmessages: [...prevMsg, newMsg],\r\n\t\t\t\t\t},\r\n\t\t\t\t};\r\n\t\t\t},\r\n\t\t});\r\n\t}, [current_roomid, loggedInUser, subscribeToMore, target_username]);\r\n\r\n\tif (loading) return <div>Loading...</div>;\r\n\r\n\tif (error) return <></>;\r\n\r\n\treturn (\r\n\t\t<div className=\"chat-panel\">\r\n\t\t\t<div className=\"chat-header\">\r\n\t\t\t\t<img\r\n\t\t\t\t\tclassName=\"profile-picture\"\r\n\t\t\t\t\tsrc={\r\n\t\t\t\t\t\tdata\r\n\t\t\t\t\t\t\t? data.user.photo\r\n\t\t\t\t\t\t\t: \"https://icon-library.com/images/default-user-icon/default-user-icon-13.jpg\"\r\n\t\t\t\t\t}\r\n\t\t\t\t\talt=\"profile\"\r\n\t\t\t\t/>\r\n\t\t\t\t<div>{target_username}</div>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"chat-messages\" ref={messagesRef}>\r\n\t\t\t\t{loading ? (\r\n\t\t\t\t\t<p>Loading...</p>\r\n\t\t\t\t) : error ? (\r\n\t\t\t\t\t<p>Error</p>\r\n\t\t\t\t) : (\r\n\t\t\t\t\tdata.chatroom.messages.map(({ from, body }, i) => (\r\n\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\tclassName={`chat-message${from === loggedInUser ? \" self\" : \"\"}`}\r\n\t\t\t\t\t\t\tkey={i}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<span>{body}</span>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t))\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t\t<div className=\"chat-input\">\r\n\t\t\t\t<div className=\"chat-input-buttons\"></div>\r\n\t\t\t\t<div className=\"chat-input-wrapper\">\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\tplaceholder=\"Aa\"\r\n\t\t\t\t\t\tonChange={(e) => setBody(e.target.value)}\r\n\t\t\t\t\t\tonKeyUp={(e) => (e.key === \"Enter\" ? handleMessage() : undefined)}\r\n\t\t\t\t\t\tvalue={body}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"chat-input-submit\">\r\n\t\t\t\t\t<button className=\"chat-input-submit-button\" onClick={handleMessage}>\r\n\t\t\t\t\t\t<Submit />\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default ChatPanel;\r\n","import { gql } from \"@apollo/client\";\r\n\r\nexport default gql`\r\n\tquery($username: String!) {\r\n\t\tuser(username: $username) {\r\n\t\t\tphoto\r\n\t\t}\r\n\t\tgetrooms(username: $username) {\r\n\t\t\ttarget\r\n\t\t\troomID\r\n\t\t}\r\n\t}\r\n`;\r\n","import { gql } from \"@apollo/client\";\r\n\r\nexport default gql`\r\n\tsubscription($username: String!) {\r\n\t\tmatch(username: $username) {\r\n\t\t\tdata {\r\n\t\t\t\ttarget\r\n\t\t\t\troomID\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport ContextStore from \"../ContextStore\";\r\nimport RoomList from \"./RoomList/RoomList\";\r\nimport MatchPanel from \"./MatchPanel/MatchPanel\";\r\nimport ChatPanel from \"./ChatPanel/ChatPanel\";\r\nimport QueryPhoto from \"./graphql/QueryPhoto\";\r\nimport SubscribeMatch from \"./graphql/SubscribeMatch\";\r\nimport \"./MainPage.scss\";\r\n\r\nconst MainPage = () => {\r\n\tconst { loggedInUser } = useContext(ContextStore);\r\n\tconst [mode, setMode] = useState(\"Matches\");\r\n\tconst matchCount = 30;\r\n\tconst [roomid, setRoomID] = useState(\"none\");\r\n\tconst [target_name, setTargetName] = useState(\"none\");\r\n\tconst { loading, error, data, subscribeToMore } = useQuery(QueryPhoto, {\r\n\t\tvariables: {\r\n\t\t\tusername: loggedInUser,\r\n\t\t},\r\n\t});\r\n\tuseEffect(() => {\r\n\t\tsubscribeToMore({\r\n\t\t\tdocument: SubscribeMatch,\r\n\t\t\tvariables: { username: loggedInUser },\r\n\t\t\tupdateQuery: (prev, { subscriptionData }) => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tprev,\r\n\t\t\t\t\tgetrooms: [...prev.getrooms, subscriptionData.data.match.data],\r\n\t\t\t\t\tuser: prev.user,\r\n\t\t\t\t};\r\n\t\t\t},\r\n\t\t});\r\n\t}, [loggedInUser, subscribeToMore]);\r\n\r\n\tif (loading || error) return <></>;\r\n\r\n\treturn (\r\n\t\t<div className=\"main\">\r\n\t\t\t<div className=\"left-panel\">\r\n\t\t\t\t<div className=\"profile-wrapper\">\r\n\t\t\t\t\t<img\r\n\t\t\t\t\t\tclassName=\"profile-picture\"\r\n\t\t\t\t\t\tsrc={\r\n\t\t\t\t\t\t\tdata.user\r\n\t\t\t\t\t\t\t\t? data.user.photo\r\n\t\t\t\t\t\t\t\t: \"https://icon-library.com/images/default-user-icon/default-user-icon-13.jpg\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\talt=\"X\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<div className=\"profile-title\">My Profile</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"mode-buttons\">\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tclassName={`${mode === \"Matches\" ? \"mode-choosing\" : \"\"}`}\r\n\t\t\t\t\t\tonClick={() => setMode(\"Matches\")}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tMatches\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tclassName={`${mode === \"Messages\" ? \"mode-choosing\" : \"\"}`}\r\n\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\tlet rooms = data.getrooms;\r\n\t\t\t\t\t\t\tif (rooms.length > 0) {\r\n\t\t\t\t\t\t\t\tsetRoomID(rooms[0].roomID);\r\n\t\t\t\t\t\t\t\tsetTargetName(rooms[0].target);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tsetMode(\"Messages\");\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tMessages\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"messages\">\r\n\t\t\t\t\t{mode === \"Messages\" ? (\r\n\t\t\t\t\t\t<RoomList\r\n\t\t\t\t\t\t\trooms={data.getrooms}\r\n\t\t\t\t\t\t\tsetRoomID={setRoomID}\r\n\t\t\t\t\t\t\tsetTargetName={setTargetName}\r\n\t\t\t\t\t\t></RoomList>\r\n\t\t\t\t\t) : null}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t{mode === \"Matches\" ? (\r\n\t\t\t\t<MatchPanel matchCount={matchCount} />\r\n\t\t\t) : roomid !== \"none\" ? (\r\n\t\t\t\t<ChatPanel\r\n\t\t\t\t\tcurrent_roomid={roomid}\r\n\t\t\t\t\ttarget_username={target_name}\r\n\t\t\t\t\tcurrent_username={loggedInUser}\r\n\t\t\t\t/>\r\n\t\t\t) : (\r\n\t\t\t\t<div>You don't have any chatroom</div>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default MainPage;\r\n","import React, { useState } from \"react\";\r\nimport IndexPage from \"./IndexPage/IndexPage\";\r\nimport ContextStore from \"./ContextStore\";\r\nimport MainPage from \"./MainPage/MainPage\";\r\n\r\nconst App = () => {\r\n\tconst [loggedIn, setLoggedIn] = useState(false);\r\n\tconst [loggedInUser, setLoggedInUser] = useState(\"\");\r\n\r\n\treturn (\r\n\t\t<ContextStore.Provider value={{ setLoggedIn, loggedInUser, setLoggedInUser }}>\r\n\t\t\t{loggedIn ? <MainPage /> : <IndexPage />}\r\n\t\t</ContextStore.Provider>\r\n\t);\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { split, HttpLink } from \"@apollo/client\";\r\nimport { getMainDefinition } from \"@apollo/client/utilities\";\r\nimport { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\r\nimport { WebSocketLink } from \"@apollo/client/link/ws\";\r\nimport App from \"./App\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./index.scss\";\r\n\r\nconst L = \"ntinderu-backend.herokuapp.com\";\r\nconst httpLink = new HttpLink({\r\n\turi: `https://${L}/`,\r\n});\r\n\r\n// Create a WebSocket link:\r\nconst wsLink = new WebSocketLink({\r\n\turi: `ws://${L}/graphql`,\r\n\toptions: { reconnect: true },\r\n});\r\n\r\n// using the ability to split links, you can send data to each link\r\n// depending on what kind of operation is being sent\r\nconst link = split(\r\n\t// split based on operation type\r\n\t({ query }) => {\r\n\t\tconst definition = getMainDefinition(query);\r\n\t\treturn definition.kind === \"OperationDefinition\" && definition.operation === \"subscription\";\r\n\t},\r\n\twsLink,\r\n\thttpLink\r\n);\r\n\r\nconst client = new ApolloClient({\r\n\tlink,\r\n\tcache: new InMemoryCache().restore(),\r\n});\r\nReactDOM.render(\r\n\t<ApolloProvider client={client}>\r\n\t\t<App />\r\n\t</ApolloProvider>,\r\n\tdocument.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}